Primitive data types are int, float, char and bool.
Non-Primitive data types are classes, structures, arrays and strings.
In C# arrays and strings are both classes. Strings map to (System.String) and arrays map to (System.Array) class in the system namespace.

In C# we have two main type the classes and structures from which we create new types. So every type we learned so far is either a structure or a class.
All primitive types are structures. Use structures for small types that can take no more than 8bytes internally defined as a structure in dot net.

Arrays and Strings are both classes. We can also define custom classes like person or calculator. In C-sharp these classes on structures are treated differently at runtime in terms of memory management.

Value Types and Reference types
Structures are value types while classes are reference types.
When you create a variable that is a value type a part of memory called Stack is allocated for that variable. This memory allocation is done automatically so you don't have to worry about it. When this variable goes out of scope it will immediately get removed from the stack by runtime or C-L-R.

In reference types however you the programmer need to allocate memory yourself. 
When we use the new operator keyword while instantiating classes, the new operator will tell the runtime to allocate memory to this object. And this happens from a different area of the memory called heap memory. This area of memory unlike Stack is sustainable. So if you create an object in reference type and that object goes out of scope it will continue to exist in the heap for a little while. It won't be removed immediately. There is a process called garbage collection which is done by runtime or C-L-R that takes care of releasing the object from heap memory once it is used.

Conclusion
when we  copy an object to a new variable depending on whether that object is a value type or reference type. There will be two different outcomes and it's much easier to show this in code. Copying value types will be different from reference types.

Integers are value types. When we copy a variable of value type to another variable a copy of that value is taken and stored in the target location in the memory. This is called passing by value since their values are copied.

Memory allocation for value types (structures).
Somewhere in the stack we have a location identified by A. And in that location we have the value 10 when we copy to B, a new location in memory and stack is created identified as B and the value we had there in A is copied to B. That's why these two variables are now completely independent and making a change to one does not impact the other.
EX:The output will be a: 10 ,b:  11


Memory allocation for reference types (classes).

When we declare an array(array1 in demo) it is class  and falls under the reference type category.
Now when we copy it to another variable array(array2 in demo)and modify the first element in the target array(array2).
			var arr1 = new int[3] { 1, 2, 3 };//new keyword allocates memory 
            var arr2 = arr1;
            arr2[0] = 0;
            Console.WriteLine(string.Format("arr1[0]: {0}, arr2[0]: {1}", arr1[0], arr2[0]));
The output will be arr1[0]: 0, arr2[0]: 0

When we create and initialize array 1, an object is created on the heap. This object is in a memory location with that address on the heap and inside this memory location we have the actual array with three elements [1,2,3].
Next the runtime or C-L-R will create a variable on the stack identified as array1 and the value inside this variable or inside this memory location is a memory address and that's the address of the object on the heap. EX:arr1[0X00416A].
Array1 points or references to the object on the heap.

Copying array1 to array2.
Runtime or C-L-R creates another variable on the stack identified as Array 2 and again inside this variable We're going to have a memory address.
EX:arr2[0X00416A]. this address is the address of the object on the heap. That's why both array 1 and array 2 point to the same object. Which means when we make any changes on this object on the heap either through array1 reference or array2 the changes are visible through the other variable. That's why we call these types reference types.
So when we copy them their reference or their memory address is copied and not the actual value.








